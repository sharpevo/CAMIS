/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package org.chd.struts.adm.action;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.chd.HibernateSessionFactory;
import org.chd.MisConstants;
import org.chd.entity.AdminInfo;
import org.chd.entity.StudentInfo;
import org.chd.entity.TeacherInfo;
import org.chd.struts.adm.form.UserInfoModifyForm;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

/** 
 * MyEclipse Struts
 * Creation date: 10-02-2006
 * 
 * XDoclet definition:
 * @struts.action path="/UserInfoModify" name="UserInfoModifyForm" input="/others_info_modify.jsp" scope="request" validate="true"
 */
public class UserInfoModifyAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		UserInfoModifyForm UserInfoModifyForm = (UserInfoModifyForm) form;
		String identity=UserInfoModifyForm.getIdentity();
		String adminId=UserInfoModifyForm.getAdminId();
        String teacherId=UserInfoModifyForm.getTeacherId();
        String studentId=UserInfoModifyForm.getStudentId();
		String pageforward="";
		Session session = HibernateSessionFactory.getSession();
		Transaction tx = null;
		try
		{
		if(identity==null) pageforward="failure";
			
		if(identity.equals("student")) 
			{
			        tx=session.beginTransaction();
			        Query query=session.createQuery("from StudentInfo s where s.studentId=:studentId");
			        query.setString("studentId", studentId);
			        List list=query.list();
			        tx.commit();
			        if(list.isEmpty())   	pageforward="failure";
			        else
			        {
			        	StudentInfo studentinfo=(StudentInfo)list.iterator().next();
			        	request.setAttribute(MisConstants.STUDENTINFO_KEY, studentinfo);
			        	pageforward="StuInfoShow";
			        }
			}
		if(identity.equals("teacher"))
		     {
			        tx=session.beginTransaction();
			        Query query=session.createQuery("from TeacherInfo t where t.teacherId=:teacherId");
			        query.setString("teacherId", teacherId);
			        List list=query.list();
			        tx.commit();
			        if(list.isEmpty() ) pageforward="failure";
			        else
			        {
			        	TeacherInfo teacherinfo=(TeacherInfo)list.iterator().next();
			        	request.setAttribute(MisConstants.TEACHERINFO_KEY, teacherinfo);
			        	pageforward="TeaInfoShow";
			        }
		
		     }
		if(identity.equals("jwy"))
		    {
			        tx=session.beginTransaction();
			        Query query=session.createQuery("from AdminInfo a where a.adminId=:adminId");
			        query.setString("adminId", adminId);
			        List list=query.list();
			        tx.commit();
			        if(list.isEmpty())
			        	pageforward="failure";
			        else
			        {
			        	AdminInfo Jwyinfo=(AdminInfo)list.iterator().next();
			        	request.setAttribute(MisConstants.JWYINFO_KEY,Jwyinfo);
			        	pageforward="JwyInfoShow";
			        }
			
		    }
		}catch(Exception e){
				e.printStackTrace();
				if (tx != null)
					tx.rollback();
				ActionErrors actionErrors = new ActionErrors();
				actionErrors.add(ActionErrors.GLOBAL_ERROR, new ActionError(
						"errors.SQLError"));
				ActionForward returnActionForward = new ActionForward(mapping
						.getInput());
				return returnActionForward;
			}
		ActionForward returnActionForward = mapping.findForward(pageforward);
		return returnActionForward;
	}
}
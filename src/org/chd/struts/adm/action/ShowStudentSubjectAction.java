/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package org.chd.struts.adm.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.chd.HibernateSessionFactory;
import org.chd.MisConstants;
import org.chd.entity.StudentInfo;
import org.chd.entity.SubjectInfo;
import org.chd.struts.adm.form.ShowStudentSubjectForm;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;

/** 
 * MyEclipse Struts
 * Creation date: 10-13-2006
 * 
 * XDoclet definition:
 * @struts.action path="/ShowStudentSubject" name="ShowStudentSubjectForm" input="/stu_change_subject.jsp" scope="request" validate="true"
 * @struts.action-forward name="success" path="/stu_subject_info.jsp" redirect="true"
 */
public class ShowStudentSubjectAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ShowStudentSubjectForm ShowStudentSubjectForm = (ShowStudentSubjectForm) form;// TODO Auto-generated method stub
		String pageforward="";
		String studentId=ShowStudentSubjectForm.getStudentId();
		Session session = HibernateSessionFactory.getSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			Criteria criteria1 = session.createCriteria(StudentInfo.class);
			criteria1.add(Restrictions.eq("studentId", studentId));
			Criteria criteria2 = session.createCriteria(SubjectInfo.class);
			criteria2.add(Restrictions.eq("studentId", studentId));
			StudentInfo student=(StudentInfo)criteria1.uniqueResult();
			SubjectInfo subject=(SubjectInfo)criteria2.uniqueResult();
			if(student!=null&&subject!=null)
			{
			request.setAttribute(MisConstants.STUDENTINFO_KEY, student);
			request.setAttribute(MisConstants.SUBJETINFO_KEY,subject);
			pageforward = "success";
			}
			else
			{
				pageforward="wxkt";
			}
		} catch (Exception e) {
			if (tx != null)
				e.printStackTrace();
				tx.rollback();
			ActionErrors actionErrors = new ActionErrors();
			actionErrors.add(ActionErrors.GLOBAL_ERROR, new ActionError(
					"errors.SQLError"));
			ActionForward returnActionForward = new ActionForward(mapping
					.getInput());
			return returnActionForward;
		} finally {
			session.close();
		}
		ActionForward returnActionForward = mapping.findForward(pageforward);
		return returnActionForward;
	}
}
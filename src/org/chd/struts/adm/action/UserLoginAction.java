/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package org.chd.struts.adm.action;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.chd.HibernateSessionFactory;
import org.chd.MisConstants;
import org.chd.entity.AdminInfo;
import org.chd.entity.StudentInfo;
import org.chd.entity.TeacherInfo;
import org.chd.struts.adm.form.UserLoginForm;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 * MyEclipse Struts Creation date: 10-02-2006
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/check_login" name="UserLoginForm" input="/index.html"
 *                scope="request" validate="true"
 */
public class UserLoginAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		UserLoginForm UserLoginForm = (UserLoginForm) form;
		HttpSession s = request.getSession();
		String identity = UserLoginForm.getIdentity();
		String username = UserLoginForm.getUsername();
		String password = UserLoginForm.getPassword();
		String sql = "from StudentInfo s where s.studentId=:id and s.studentPassword=:password";
		if (identity.equals("teacher")) {
			sql = "from TeacherInfo t where t.teacherId=:id and t.teacherPassword=:password";
		}
		if (identity.equals("admin") || identity.equals("jwy")) {
			sql = "from AdminInfo a where a.adminId=:id and a.adminPassword=:password";
		}
		Session session = HibernateSessionFactory.getSession();
		Transaction tx = null;
		String pageforward = "";
		try {
			tx = session.beginTransaction();
			Query query = session.createQuery(sql);
			query.setString("id", username);
			query.setString("password", password);
			List result = query.list();
			tx.commit();
			if (result.isEmpty())				
				{
				pageforward = "failure";
				}
			else {
				pageforward = "success";
				if (identity.equals("student")) {
					StudentInfo student = (StudentInfo) result.iterator()
							.next();
					s.setAttribute(MisConstants.STUDENTINFO_KEY, student);
					pageforward = "stu_main";
					s.setAttribute(MisConstants.ISLOGINED_KEY, "stu");
				}
				if (identity.equals("teacher")) {
					TeacherInfo teacher = (TeacherInfo) result.iterator()
							.next();
					s.setAttribute(MisConstants.TEACHERINFO_KEY, teacher);
					s.setAttribute(MisConstants.ISLOGINED_KEY, "tea");
					pageforward = "tea_main";
				}
				if (identity.equals("admin") || identity.equals("jwy")) {
					AdminInfo admin = (AdminInfo) result.iterator().next();
					if (admin.getAdminTag()) {
						pageforward = "adm_main";
						s.setAttribute(MisConstants.ADMININFO_KEY, admin);
						s.setAttribute(MisConstants.ISLOGINED_KEY, "adm");
					} else {
						pageforward = "jwy_main";
						s.setAttribute(MisConstants.JWYINFO_KEY, admin);
						s.setAttribute(MisConstants.ISLOGINED_KEY, "jwy");
					}
				}
				
			}
		} catch (Exception e) {
			e.printStackTrace();
			if (tx != null)
				tx.rollback();
			ActionErrors actionErrors = new ActionErrors();
			actionErrors.add(ActionErrors.GLOBAL_ERROR, new ActionError(
					"errors.SQLError"));
			saveErrors(request,actionErrors);
			pageforward="failure";
		} finally {
			session.close();
		}
		ActionForward returnActionForward = mapping.findForward(pageforward);
		return returnActionForward;
	}
}
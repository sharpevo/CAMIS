/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package org.chd.struts.stu.action;

import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.chd.HibernateSessionFactory;
import org.chd.entity.SubjectInfo;
import org.chd.struts.stu.form.SujbectShowBySortForm;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;

/** 
 * MyEclipse Struts
 * Creation date: 10-22-2006
 * 
 * XDoclet definition:
 * @struts.action path="/stu/ShowSubjectBySort" name="SubjectShowBySortAction" scope="request" validate="true"
 * @struts.action-forward name="success" path="/stu/show_subject_bysort.jsp" redirect="true"
 */
public class SubjectShowBySortAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		SujbectShowBySortForm SubjectShowBySortForm = (SujbectShowBySortForm) form;
		String sortname=SubjectShowBySortForm.getSortname();			
		String pageforward=null;
		Session session = HibernateSessionFactory.getSession();
		List subject_list = session.createCriteria(SubjectInfo.class).add(
				Restrictions.isNull("studentId")).list();
		Iterator i1=subject_list.iterator();
		HashSet h=new HashSet();
		try
		{
		if(sortname.equals("teacherId"))
		{
			String teacherId=SubjectShowBySortForm.getTeacherId();
			while(i1.hasNext())
			{
				SubjectInfo subject=(SubjectInfo)i1.next();
				if(subject.getTeacherAId()!=null&&subject.getTeacherAId().equals(teacherId))
					h.add(subject);
				pageforward="success";	
				request.setAttribute("SubjectSet", h);
			}
				
		}
		if(sortname.equals("difficulty"))
		{
			String difficulty=SubjectShowBySortForm.getDifficulty();
			while(i1.hasNext())
			{
				SubjectInfo subject=(SubjectInfo)i1.next();
				if(subject.getDifficulty()!=null&&subject.getDifficulty().equals(difficulty))
					h.add(subject);
				pageforward="success";		
				request.setAttribute("SubjectSet", h);
			}
		}
		if(sortname.equals("fieldName"))
		{
			String fieldName=SubjectShowBySortForm.getFieldName();
			while(i1.hasNext())
			{
				SubjectInfo subject=(SubjectInfo)i1.next();
				if(subject.getFieldName()!=null&&subject.getFieldName().equals(fieldName))
					
					{
					h.add(subject);
					pageforward="success";
					}	
			}
			request.setAttribute("SubjectSet", h);
		}
		}catch(Exception e)
		{
			pageforward="failure";
		}
		return mapping.findForward(pageforward);
	}
}